{"version":3,"sources":["app.js","controllers/account.js","controllers/definition.add.js","controllers/definition.edit.js","controllers/definition.view.js","controllers/main.js","controllers/page.js","controllers/search.js","services/account.js","services/definition.js","services/language.js","services/rover.js","services/search.js"],"names":["nkomoLearningApp","angular","module","_appVersion","_isLocal","window","location","hostname","match","_assetVersion","Date","now","_apiEndpoint","constant","nkomoServices","nkomoDirectives","nkomoControllers","config","$routeProvider","assetVersion","when","redirectTo","templateUrl","controller","otherwise","run","$rootScope","$location","Rover","debug","$","document","ready","tooltip","$scope","AccountService","path","hasToken","login","email","authenticate","password","localAuth","authURIs","local","facebookAuth","facebook","googleAuth","google","linkedinAuth","linkedin","twitterAuth","twitter","setCredentials","$routeParams","$sessionStorage","DefinitionService","LanguageService","definitionType","formData","types","word","adj","adv","conn","ex","pre","pro","n","v","definition","subType","store","title","alt_titles","altTitles","type","sub_type","translations","languages","language","code","id","update","create","then","response","data","replace","definitionId","definitions","definitionFormData","get","responseText","definitionForm","langCode","searchTerm","$localStorage","toggleNav","toggleClass","SearchFactory","results","lookup","length","lookupDefinition","lookupAnything","isSearching","search","any","clear","url","def","alias","mainLanguage","service","$window","$http","apiEndpoint","auth","token","this","callback","isAuthenticated","returnTo","params","isLocal","href","factory","count","term","searchMethod","endpoint","method","post","delete","$route","timestamp","0","subTypes","1","fam","given","10","prov","saying","20","30","msg","console","log","query"],"mappings":"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","file":"learn.js","sourcesContent":["/**\n * Main angular application.\n *\n */\nvar nkomoLearningApp = angular.module('learn', [\n    'ngStorage', 'ngRoute',\n    'nkomo.controllers', 'nkomo.directives', 'nkomo.services', 'nkomo.rover'\n]);\n\n//\n// App constants.\n//\n\nvar _appVersion = '0.1.1';\nvar _isLocal =\n    (window.location.hostname == 'localhost' ||\n        window.location.hostname.match(/.*\\.local$/i) ||\n        window.location.hostname.match(/.*\\.vagrant$/i)) ? true : false;\nvar _assetVersion = _isLocal ? Date.now() : _appVersion;\nvar _apiEndpoint = _isLocal ? 'http://dinkomo.vagrant/0.1' : 'http://dinkomo.frnk.ca/0.1';\n\nnkomoLearningApp.constant('appVersion', _appVersion)\n                .constant('isLocalEnvironment', _isLocal)\n                .constant('assetVersion', _assetVersion)\n                .constant('apiEndpoint', _apiEndpoint);\n\n//\n// Initialize modules so that we can use them from different files.\n//\n\nvar nkomoServices = angular.module('nkomo.services', ['nkomo.rover']);\nvar nkomoDirectives = angular.module('nkomo.directives', ['nkomo.rover']);\nvar nkomoControllers = angular.module('nkomo.controllers', ['nkomo.rover']);\n\n//\n// Configures the application.\n//\n\nnkomoLearningApp.config(['$routeProvider', 'assetVersion',\n    function($routeProvider, assetVersion) {\n\n        // Landing page.\n        return $routeProvider.when('/', {\n            redirectTo: '/dict'\n        })\n\n        // About page.\n        .when('/about', {\n\t\t\ttemplateUrl: '/views/about.html?' + assetVersion,\n            controller: 'PageController'\n\t\t})\n\n        // Settings page.\n        .when('/account', {\n\t\t\ttemplateUrl: '/views/account.html?' + assetVersion,\n            controller: 'AccountController'\n\t\t})\n\n        // Login form.\n        .when('/login', {\n\t\t\ttemplateUrl: '/views/login.html?' + assetVersion,\n            controller: 'AccountController'\n\t\t})\n\n        // Stats page.\n        .when('/stats', {\n\t\t\ttemplateUrl: '/views/stats.html?' + assetVersion,\n            controller: 'PageController'\n\t\t})\n\n        // Search pages.\n        .when('/dict/:searchTerm?', {\n\t\t\ttemplateUrl: '/views/search.html?' + assetVersion,\n            controller: 'SearchController'\n        })\n        .when('/:langCode', {\n\t\t\ttemplateUrl: '/views/search.html?' + assetVersion,\n            controller: 'SearchController'\n        })\n\n        //\n        // Dictionary pages.\n        //\n        .when('/:langCode/define/:searchTerm', {\n\t\t\ttemplateUrl: '/views/definition.html?' + assetVersion,\n            controller: 'ViewDefinitionController'\n        })\n        .when('/:langCode/poem/:searchTerm', {\n\t\t\ttemplateUrl: '/views/poem.html?' + assetVersion,\n            controller: 'ViewDefinitionController'\n        })\n        .when('/:langCode/%2Badd/:definitionType', {\n\t\t\ttemplateUrl: '/views/forms/add-word.html?' + assetVersion,\n            controller: 'AddDefinitionController'\n        })\n        .when('/edit/definition/:definitionId', {\n\t\t\ttemplateUrl: '/views/forms/edit-definition.html?' + assetVersion,\n            controller: 'EditDefinitionController'\n        })\n\n        // Else, redirect to search page.\n        .otherwise({\n\t\t\tredirectTo: '/dict'\n\t\t});\n    }\n])\n\n// Runs the application.\n.run(['$rootScope', '$location', 'Rover',\n    function ($rootScope, $location, Rover) {\n\n        Rover.debug('Running app...');\n\n        $(document).ready(function() {\n\n            Rover.debug('Document ready.');\n\n            // Navigation tooltips.\n            $(function () {\n                $('[data-toggle=\"tooltip\"]').tooltip();\n            });\n        });\n\n    }\n]);\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('AccountController', ['$scope', '$location', 'AccountService', 'Rover',\r\n    function($scope, $location, AccountService, Rover) {\r\n\r\n        // Check that user is signed in.\r\n        if ($location.path() != '/login' && !AccountService.hasToken()) {\r\n            return AccountService.setCredentials($location.path());\r\n        }\r\n\r\n        // Logs in user.\r\n        $scope.login = function() {\r\n            Rover.debug('Authenticating: ' + $scope.email);\r\n            AccountService.authenticate($scope.email, $scope.password);\r\n        };\r\n\r\n        // Authentication URIs.\r\n        $scope.localAuth    = AccountService.authURIs.local;\r\n        $scope.facebookAuth = AccountService.authURIs.facebook;\r\n        $scope.googleAuth   = AccountService.authURIs.google;\r\n        $scope.linkedinAuth = AccountService.authURIs.linkedin;\r\n        $scope.twitterAuth  = AccountService.authURIs.twitter;\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('AddDefinitionController', [\r\n    '$scope', '$routeParams', '$sessionStorage', '$location',\r\n    'AccountService', 'DefinitionService', 'LanguageService', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, $location,\r\n        AccountService, DefinitionService, LanguageService, Rover) {\r\n\r\n        Rover.debug('AddDefinitionController');\r\n\r\n        // Make sure user is authenticated.\r\n        // if (!AccountService.isAuthenticated()) {\r\n        //     return AccountService.setCredentials($location.path());\r\n        // }\r\n\r\n        $scope.definitionType = $routeParams.definitionType;\r\n\r\n        // TODO: pull form data from API.\r\n        // $scope.formData = $sessionStorage.definitionFormData || null;\r\n        $scope.formData = {\r\n            types: {\r\n                word: {\r\n                    adj: 'Adjective',\r\n                    adv: 'Adverb',\r\n                    conn: 'Connective',\r\n                    ex: 'Exclamation',\r\n                    pre: 'Preposition',\r\n                    pro: 'Pronoun',\r\n                    n: 'Noun',\r\n                    v: 'Verb'\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.definition = {subType: 'n'};\r\n\r\n        // Stores a new definition.\r\n        $scope.store = function() {\r\n\r\n            Rover.debug('Saving definition...');\r\n\r\n            var definition = {\r\n                title: $scope.definition.title,\r\n                alt_titles: $scope.definition.altTitles || '',\r\n                type: 0,\r\n                sub_type: $scope.definition.subType,\r\n                translations: $scope.definition.translations,\r\n                languages: [$scope.language.code]\r\n            };\r\n\r\n            var save = $scope.definition.id ? DefinitionService.update : DefinitionService.create;\r\n\r\n            // save(definition).then(\r\n            DefinitionService.create(definition).then(\r\n\r\n                // On success, browse to definition page.\r\n                function(response) {\r\n                    $location.path('/' + $scope.language.code + '/define/' + response.data.title.replace(' ', '_'));\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('on error...');\r\n                    Rover.debug(response);\r\n                }\r\n            );\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('EditDefinitionController', [\r\n    '$scope', '$routeParams', '$sessionStorage', '$location',\r\n    'AccountService', 'DefinitionService', 'LanguageService', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, $location,\r\n        AccountService, DefinitionService, LanguageService, Rover) {\r\n\r\n        Rover.debug('EditDefinitionController');\r\n\r\n        // Make sure user is authenticated.\r\n        // if (!AccountService.isAuthenticated()) {\r\n        //     return AccountService.setCredentials($location.path());\r\n        // }\r\n\r\n        $scope.definitionId = $routeParams.definitionId;\r\n        $scope.definition = $sessionStorage.definitions[$routeParams.definitionId] || null;\r\n        $scope.formData = $sessionStorage.definitionFormData || null;\r\n\r\n        // TODO: pull form data from API.\r\n        // ...\r\n\r\n        // Retrieve definition data.\r\n        if (!$scope.definition)\r\n        {\r\n            Rover.debug('Retrieving definition # \"'+ $scope.definitionId +'\"...');\r\n\r\n            DefinitionService.get($scope.definitionId).then(\r\n\r\n                // Save definition object in $scope and $sessionStorage.\r\n                function(response) {\r\n                    $scope.definition = $sessionStorage.definitions[$routeParams.definitionId] = response.data;\r\n                },\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve definition data: ' + response.responseText);\r\n                }\r\n            );\r\n        }\r\n\r\n        // Form data.\r\n\r\n\r\n        $scope.definitionForm = {subType: 'n'};\r\n\r\n\r\n        // Stores a new definition.\r\n        $scope.store = function() {\r\n\r\n            Rover.debug('Saving definition...');\r\n\r\n            var definition = {\r\n                title: $scope.definitionForm.title,\r\n                alt_titles: $scope.definitionForm.altTitles || '',\r\n                type: 0,\r\n                sub_type: $scope.definitionForm.subType,\r\n                translations: $scope.definitionForm.translations,\r\n                languages: [$scope.language.code]\r\n            };\r\n\r\n            var save = $scope.definitionForm.id ? DefinitionService.update : DefinitionService.create;\r\n\r\n            // save(definition).then(\r\n            DefinitionService.create(definition).then(\r\n\r\n                // On success, browse to definition page.\r\n                function(response) {\r\n                    $location.path('/' + $scope.language.code + '/define/' + response.data.title.replace(' ', '_'));\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('on error...');\r\n                    Rover.debug(response);\r\n                }\r\n            );\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('ViewDefinitionController', [\r\n    '$scope', '$routeParams', '$sessionStorage', '$location',\r\n    'AccountService', 'DefinitionService', 'LanguageService', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, $location,\r\n        AccountService, DefinitionService, LanguageService, Rover) {\r\n\r\n        Rover.debug('ViewDefinitionController');\r\n\r\n        //\r\n        // Query parameters.\r\n        //\r\n\r\n        $scope.langCode = $routeParams.langCode;\r\n        $scope.searchTerm = $routeParams.searchTerm ? $routeParams.searchTerm.replace('_', ' ') : false;\r\n\r\n        // Checks if current path needs authentication.\r\n        if ($routeParams.definitionId) {\r\n            if (!AccountService.hasToken()) {\r\n                return AccountService.setCredentials($location.path());\r\n            }\r\n\r\n            Rover.debug('Definition: ' + $routeParams.definitionId);\r\n        }\r\n\r\n        //\r\n        // Language data.\r\n        //\r\n\r\n        $scope.language = $sessionStorage.languages[$routeParams.langCode] || null;\r\n\r\n        if (!$scope.language)\r\n        {\r\n            Rover.debug('Retrieving language with code \"'+ $scope.langCode +'\"...');\r\n\r\n            LanguageService.get($scope.langCode).then(\r\n\r\n                // Save languge object in $scope and $sessionStorage.\r\n                function(response) {\r\n                    $scope.language = $sessionStorage.languages[$routeParams.langCode] = response.data;\r\n                },\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve language data: ' + response.responseText);\r\n                }\r\n            );\r\n        }\r\n\r\n        //\r\n        // Definition data.\r\n        //\r\n\r\n        if ($scope.searchTerm)\r\n        {\r\n            $scope.definitions = $sessionStorage.definitions[$routeParams.searchTerm] || null;\r\n\r\n            if (!$scope.definitions)\r\n            {\r\n                Rover.debug('Retrieving definitions for \"'+ $scope.searchTerm +'\"...');\r\n\r\n                // DefinitionService.search($scope.searchTerm, 'word', $scope.langCode).then(\r\n                DefinitionService.match($scope.searchTerm).then(\r\n\r\n                    // On success.\r\n                    function(response) {\r\n\r\n                        // Save the definition list locally and in the sessionStorage.\r\n                        $scope.definitions = $sessionStorage.definitions[$routeParams.searchTerm] = response.data;\r\n                    },\r\n\r\n                    // On error.\r\n                    function(response) {\r\n                        Rover.debug('Could not retrieve definitions.');\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('MainController', ['$scope', '$sessionStorage', '$localStorage', 'AccountService', 'Rover', 'assetVersion',\r\n    function($scope, $sessionStorage, $localStorage, AccountService, Rover, assetVersion) {\r\n\r\n        $scope.assetVersion = assetVersion;\r\n\r\n        // Globally available language and definition objects.\r\n        $sessionStorage.languages = $sessionStorage.languages || {};\r\n        $sessionStorage.definitions = $sessionStorage.definitions || {};\r\n\r\n        // Toggles navigation links.\r\n        $scope.toggleNav = function() {\r\n            // $('aside .toggles').toggleClass('hidden-xs');\r\n            $('aside .toggles').toggleClass('hidden-xs');\r\n        };\r\n\r\n        //\r\n        $scope.hasToken = AccountService.hasToken();\r\n    }\r\n]);\r\n","/**\r\n * \r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('PageController', ['$scope',\r\n    function($scope) {\r\n\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('SearchController', [\r\n    '$scope', '$routeParams', '$sessionStorage',\r\n    'LanguageService', 'DefinitionService', 'SearchFactory', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, LanguageService, DefinitionService, SearchFactory, Rover) {\r\n\r\n        Rover.debug('SearchController');\r\n\r\n        // Search parameters.\r\n        $scope.searchTerm = $routeParams.searchTerm ? $routeParams.searchTerm.replace('_', ' ') : null;\r\n        $scope.langCode = $routeParams.langCode;\r\n\r\n        // Language data.\r\n        $scope.language = $routeParams.langCode ?\r\n            ($sessionStorage.languages[$routeParams.langCode] || null) : false;\r\n\r\n        if ($scope.language === null)\r\n        {\r\n            Rover.debug('Retrieving language with code \"'+ $scope.langCode +'\"...');\r\n\r\n            LanguageService.get($scope.langCode).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n\r\n                    // Save the languge object in the $scope and the $sessionStorage.\r\n                    $scope.language = $sessionStorage.languages[$scope.langCode] = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve language data.');\r\n                }\r\n            );\r\n        }\r\n\r\n        // Search results.\r\n        $scope.results = null;\r\n\r\n        // Queries the database.\r\n        $scope.lookup = function(searchTerm, langCode) {\r\n\r\n            // Default values.\r\n            searchTerm = searchTerm || $scope.searchTerm;\r\n            langCode = langCode || $scope.langCode;\r\n\r\n            // Performance check.\r\n            if (searchTerm.length < 1) {\r\n                return;\r\n            }\r\n\r\n            // Definition lookup.\r\n            if (langCode) {\r\n                $scope.lookupDefinition(searchTerm, langCode);\r\n            }\r\n\r\n            // General lookup.\r\n            else {\r\n                $scope.lookupAnything(searchTerm, langCode);\r\n            }\r\n        };\r\n        $scope.lookupDefinition = function(searchTerm, langCode) {\r\n\r\n            Rover.debug('Looking up definitions matching \"'+ searchTerm +'\"...');\r\n\r\n            // Notify user that we're querying the API.\r\n            $scope.results = [];\r\n            $scope.isSearching = true;\r\n\r\n            DefinitionService.search(searchTerm, 'word', langCode).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n                    $scope.isSearching = false;\r\n                    $scope.results = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Error');\r\n                    Rover.debug(response);\r\n                    $scope.isSearching = false;\r\n                }\r\n            );\r\n        };\r\n        $scope.lookupAnything = function(searchTerm, langCode) {\r\n\r\n            Rover.debug('Looking up anything matching \"'+ searchTerm +'\"...');\r\n\r\n            // Notify user that we're querying the API.\r\n            $scope.results = [];\r\n            $scope.isSearching = true;\r\n\r\n            SearchFactory.any(searchTerm).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n                    $scope.isSearching = false;\r\n                    $scope.results = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Error');\r\n                    Rover.debug(response);\r\n                    $scope.isSearching = false;\r\n                }\r\n            );\r\n        };\r\n\r\n        // Clears the search form.\r\n        $scope.clear = function()\r\n        {\r\n            $scope.results = null;\r\n            $scope.searchTerm = '';\r\n        };\r\n\r\n        // Generates the URL for a definition.\r\n        $scope.url = function(def)\r\n        {\r\n            // Performance check.\r\n            if (!def || !def.type) {\r\n                return '#/dict';\r\n            }\r\n\r\n            var url = '#/dict', alias = def.title.replace(' ', '_');\r\n\r\n            switch (def.type)\r\n            {\r\n                case 'word':\r\n                    url = '#/' + def.mainLanguage.code + '/define/' + alias;\r\n            }\r\n\r\n            return url;\r\n        };\r\n\r\n        // If a search term already exists, query the API.\r\n        if ($routeParams.searchTerm) {\r\n            $scope.lookup();\r\n        }\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.service('AccountService', ['$window', '$location', '$http', '$sessionStorage', 'Rover', 'apiEndpoint',\r\n    function($window, $location, $http, $sessionStorage, Rover, apiEndpoint) {\r\n\r\n        // Uer data.\r\n        $sessionStorage.auth = $sessionStorage.auth || {token: false};\r\n\r\n        // Authentication URIs.\r\n        this.authURIs = {\r\n            local: apiEndpoint + '/auth/local',\r\n            facebook: apiEndpoint + '/auth/facebook',\r\n            google: apiEndpoint + '/auth/google',\r\n            linkedin: apiEndpoint + '/auth/linkedin',\r\n            twitter: apiEndpoint + '/auth/twitter'\r\n        };\r\n\r\n        // Authenticates user.\r\n        // TODO: how do we include a minimum layer of security? https?\r\n        this.authenticate = function(email, password, callback) {\r\n\r\n            //\r\n            $location.path('http://api.dinkomo.vagrant/auth');\r\n\r\n            // $http.post(this.authURIs.local, {email: email, password: password}).then(\r\n            //\r\n            //     // If user was successfully authenticated, return token to callback function.\r\n            //     function(response) {\r\n            //\r\n            //         // Store token for future use.\r\n            //         $sessionStorage.auth.token = response.data.token;\r\n            //\r\n            //         // If we don't have a callback function, assume we want to redirect\r\n            //         // user to return path.\r\n            //         if (typeof callback != 'function') {\r\n            //             return $location.path(this.returnPath);\r\n            //         }\r\n            //\r\n            //         // Send token to callback function, and redirect user if callback returns true.\r\n            //         if (callback.call(response.data.token)) {\r\n            //             $location.path(this.returnPath);\r\n            //         }\r\n            //     }.bind(this),\r\n            //\r\n            //     function(response) {\r\n            //         if (typeof callback == 'function') {\r\n            //             callback.call(null);\r\n            //         }\r\n            //     }\r\n            // );\r\n        };\r\n\r\n        this.hasToken = function() {\r\n            return this.isAuthenticated();\r\n        };\r\n\r\n        this.isAuthenticated = function() {\r\n            return $sessionStorage.auth.token && $sessionStorage.auth.token.length > 0;\r\n        };\r\n\r\n        // Redirects user to login form.\r\n        this.setCredentials = function(returnTo) {\r\n\r\n            //\r\n            $sessionStorage.auth.returnTo = returnTo;\r\n            var params = Rover.isLocal ? 'app.vagrant' : 'app';\r\n            $window.location.href = 'http://api.dinkomo.vagrant/auth?next=' + params;\r\n\r\n            // $location.path('/login');\r\n            //\r\n            // // Set return path.\r\n            // this.returnPath = returnTo || '/';\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('DefinitionService', ['$http', 'apiEndpoint', 'Rover',\r\n    function($http, apiEndpoint, Rover) {\r\n\r\n        return {\r\n\r\n            count: function(type) {\r\n\r\n                type = type || 'word';\r\n\r\n                return $http.get(apiEndpoint + '/' + type + '/count');\r\n            },\r\n\r\n            get: function(id) {\r\n                return $http.get(apiEndpoint + '/definition/' + id);\r\n            },\r\n\r\n            match: function(title) {\r\n                return $http.get(apiEndpoint + '/definition/title/' + title);\r\n            },\r\n\r\n            search : function(term, definitionType, langCode, searchMethod) {\r\n\r\n                langCode = langCode || '';\r\n                definitionType = definitionType || 'word';\r\n                var endpoint = apiEndpoint + '/' + definitionType + '/search/' + term;\r\n\r\n                // Narrow search by language.\r\n                endpoint += '?lang=' + langCode;\r\n\r\n                // Specify search method.\r\n                endpoint += '&method=fulltext';\r\n\r\n    \t\t\treturn $http({method: 'GET', url: endpoint});\r\n    \t\t},\r\n\r\n            create: function(definition) {\r\n                return $http.post(apiEndpoint + '/definition', definition);\r\n            },\r\n\r\n            update: function(definition) {\r\n\r\n            },\r\n\r\n            delete: function(definition) {\r\n\r\n            }\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('LanguageService', ['$http', 'apiEndpoint',\r\n    function($http, apiEndpoint) {\r\n\r\n        return {\r\n\r\n            count: function() {\r\n                return $http.get(apiEndpoint + '/language/count');\r\n            },\r\n\r\n            get: function(langCode) {\r\n                return $http.get(apiEndpoint + '/language/' + langCode);\r\n            }\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.rover', [])\r\n\r\n.service('Rover', ['$window', '$sessionStorage', '$route', '$location',\r\n    function($window, $sessionStorage, $route, $location) {\r\n\r\n        // Dev variables.\r\n        this.timestamp = Date.now();\r\n        this.isLocal =\r\n            (window.location.hostname == 'localhost' ||\r\n                window.location.hostname.match(/.*\\.local$/i) ||\r\n                window.location.hostname.match(/.*\\.vagrant$/i)) ? true : false;\r\n\r\n        // TODO: load this asynchronously from the API.\r\n        $sessionStorage.definitionFormData =\r\n        {\r\n            types:\r\n            {\r\n                '0':\r\n                {\r\n                    title: 'word',\r\n                    subTypes:\r\n                    {\r\n                        adj: 'adjective',\r\n                        adv: 'adverb',\r\n                        conn: 'connective',\r\n                        ex: 'exclamation',\r\n                        pre: 'preposition',\r\n                        pro: 'pronoun',\r\n                        n: 'noun',\r\n                        v: 'verb'\r\n                    }\r\n                },\r\n                '1':\r\n                {\r\n                    title: 'name',\r\n                    subTypes:\r\n                    {\r\n                        fam: 'family',\r\n                        given: 'given'\r\n                    }\r\n                },\r\n                '10':\r\n                {\r\n                    title: 'phrase',\r\n                    subTypes:\r\n                    {\r\n                        ex: 'expression',\r\n                        prov: 'proverb',\r\n                        saying: 'sayng'\r\n                    }\r\n                },\r\n                '20':\r\n                {\r\n                    title: 'poem',\r\n                    subTypes: {}\r\n                },\r\n                '30':\r\n                {\r\n                    title: 'story',\r\n                    subTypes: {}\r\n                }\r\n            }\r\n        };\r\n\r\n        // Logs a message to the console.\r\n        this.debug = function(msg) {\r\n            if (this.isLocal && console) {\r\n                console.log(msg);\r\n            }\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('SearchFactory', ['$http', 'apiEndpoint',\r\n    function($http, apiEndpoint) {\r\n\r\n        return {\r\n\r\n            any : function(query) {\r\n                return $http.get(apiEndpoint + '/search/' + query + '?method=fulltext');\r\n    \t\t}\r\n        };\r\n    }\r\n]);\r\n"],"sourceRoot":"/source/"}