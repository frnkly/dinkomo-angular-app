{"version":3,"sources":["app.js","controllers/account.js","controllers/definition.edit.js","controllers/definition.view.js","controllers/main.js","controllers/page.js","controllers/search.js","services/account.js","services/definition.js","services/language.js","services/rover.js","services/search.js"],"names":["nkomoLearningApp","angular","module","_appVersion","_isLocal","window","location","hostname","match","_assetVersion","Date","now","_apiEndpoint","constant","nkomoServices","nkomoDirectives","nkomoControllers","config","$routeProvider","assetVersion","when","redirectTo","templateUrl","controller","otherwise","run","$rootScope","$location","Rover","debug","$","document","ready","tooltip","$scope","AccountService","path","hasToken","login","email","authenticate","password","localAuth","authURIs","local","facebookAuth","facebook","googleAuth","google","linkedinAuth","linkedin","twitterAuth","twitter","setCredentials","$routeParams","$sessionStorage","DefinitionService","LanguageService","isAuthenticated","definitionId","definition","definitions","get","then","response","data","responseText","definitionForm","subType","saveDefinition","title","alt_titles","altTitles","type","sub_type","translations","languages","language","code","id","update","create","replace","langCode","searchTerm","$localStorage","toggleNav","toggleClass","SearchFactory","results","lookup","length","lookupDefinition","lookupAnything","isSearching","search","any","clear","url","def","alias","mainLanguage","service","$http","apiEndpoint","auth","token","this","callback","post","returnPath","call","bind","returnTo","factory","count","term","definitionType","searchMethod","endpoint","method","delete","$window","$route","timestamp","isLocal","msg","console","log","query"],"mappings":"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","file":"learn.js","sourcesContent":["/**\n * Main angular application.\n *\n */\nvar nkomoLearningApp = angular.module('learn', [\n    'ngStorage', 'ngRoute',\n    'nkomo.controllers', 'nkomo.directives', 'nkomo.services', 'nkomo.rover'\n]);\n\n//\n// App constants.\n//\n\nvar _appVersion = '0.1.1';\nvar _isLocal =\n    (window.location.hostname == 'localhost' ||\n        window.location.hostname.match(/.*\\.local$/i) ||\n        window.location.hostname.match(/.*\\.vagrant$/i)) ? true : false;\nvar _assetVersion = _isLocal ? Date.now() : _appVersion;\nvar _apiEndpoint = _isLocal ? 'http://api.dinkomo.vagrant/0.1' : 'http://dinkomo-api.frnk.ca/0.1';\n\nnkomoLearningApp.constant('appVersion', _appVersion)\n                .constant('isLocalEnvironment', _isLocal)\n                .constant('assetVersion', _assetVersion)\n                .constant('apiEndpoint', _apiEndpoint);\n\n//\n// Initialize modules so that we can use them from different files.\n//\n\nvar nkomoServices = angular.module('nkomo.services', ['nkomo.rover']);\nvar nkomoDirectives = angular.module('nkomo.directives', ['nkomo.rover']);\nvar nkomoControllers = angular.module('nkomo.controllers', ['nkomo.rover']);\n\n//\n// Configures the application.\n//\n\nnkomoLearningApp.config(['$routeProvider', 'assetVersion',\n    function($routeProvider, assetVersion) {\n\n        // Landing page.\n        return $routeProvider.when('/', {\n            redirectTo: '/dict'\n        })\n\n        // About page.\n        .when('/about', {\n\t\t\ttemplateUrl: '/views/about.html?' + assetVersion,\n            controller: 'PageController'\n\t\t})\n\n        // Settings page.\n        .when('/account', {\n\t\t\ttemplateUrl: '/views/account.html?' + assetVersion,\n            controller: 'AccountController'\n\t\t})\n\n        // Login form.\n        .when('/login', {\n\t\t\ttemplateUrl: '/views/login.html?' + assetVersion,\n            controller: 'AccountController'\n\t\t})\n\n        // Stats page.\n        .when('/stats', {\n\t\t\ttemplateUrl: '/views/stats.html?' + assetVersion,\n            controller: 'PageController'\n\t\t})\n\n        // Search pages.\n        .when('/dict/:searchTerm?', {\n\t\t\ttemplateUrl: '/views/search.html?' + assetVersion,\n            controller: 'SearchController'\n        })\n        .when('/:langCode', {\n\t\t\ttemplateUrl: '/views/search.html?' + assetVersion,\n            controller: 'SearchController'\n        })\n\n        // Dictionary pages.\n        .when('/:langCode/define/:searchTerm', {\n\t\t\ttemplateUrl: '/views/definition.html?' + assetVersion,\n            controller: 'ViewDefinitionController'\n        })\n        .when('/:langCode/poem/:searchTerm', {\n\t\t\ttemplateUrl: '/views/poem.html?' + assetVersion,\n            controller: 'ViewDefinitionController'\n        })\n        .when('/:langCode/add/word', {\n\t\t\ttemplateUrl: '/views/forms/add-word.html?' + assetVersion,\n            controller: 'EditDefinitionController'\n        })\n        .when('/edit/definition/:definitionId', {\n\t\t\ttemplateUrl: '/views/forms/edit-definition.html?' + assetVersion,\n            controller: 'EditDefinitionController'\n        })\n\n        // Else, redirect to search page.\n        .otherwise({\n\t\t\tredirectTo: '/dict'\n\t\t});\n    }\n])\n\n// Runs the application.\n.run(['$rootScope', '$location', 'Rover',\n    function ($rootScope, $location, Rover) {\n\n        Rover.debug('Running app...');\n\n        $(document).ready(function() {\n\n            Rover.debug('Document ready.');\n\n            // Navigation tooltips.\n            $(function () {\n                $('[data-toggle=\"tooltip\"]').tooltip();\n            });\n        });\n\n    }\n]);\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('AccountController', ['$scope', '$location', 'AccountService', 'Rover',\r\n    function($scope, $location, AccountService, Rover) {\r\n\r\n        // Check that user is signed in.\r\n        if ($location.path() != '/login' && !AccountService.hasToken()) {\r\n            return AccountService.setCredentials($location.path());\r\n        }\r\n\r\n        // Logs in user.\r\n        $scope.login = function() {\r\n            Rover.debug('Authenticating: ' + $scope.email);\r\n            AccountService.authenticate($scope.email, $scope.password);\r\n        };\r\n\r\n        // Authentication URIs.\r\n        $scope.localAuth    = AccountService.authURIs.local;\r\n        $scope.facebookAuth = AccountService.authURIs.facebook;\r\n        $scope.googleAuth   = AccountService.authURIs.google;\r\n        $scope.linkedinAuth = AccountService.authURIs.linkedin;\r\n        $scope.twitterAuth  = AccountService.authURIs.twitter;\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('EditDefinitionController', [\r\n    '$scope', '$routeParams', '$sessionStorage', '$location',\r\n    'AccountService', 'DefinitionService', 'LanguageService', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, $location,\r\n        AccountService, DefinitionService, LanguageService, Rover) {\r\n\r\n        Rover.debug('EditDefinitionController');\r\n\r\n        // Make sure user is authenticated.\r\n        if (!AccountService.isAuthenticated()) {\r\n            return AccountService.setCredentials($location.path());\r\n        }\r\n\r\n        //\r\n        // Language data.\r\n        //\r\n\r\n        $scope.definitionId = $routeParams.definitionId;\r\n        $scope.definition = $sessionStorage.definitions[$routeParams.definitionId] || null;\r\n\r\n        if (!$scope.definition)\r\n        {\r\n            Rover.debug('Retrieving definition # \"'+ $scope.definitionId +'\"...');\r\n\r\n            DefinitionService.get($scope.definitionId).then(\r\n\r\n                // Save definition object in $scope and $sessionStorage.\r\n                function(response) {\r\n                    $scope.definition = $sessionStorage.definitions[$routeParams.definitionId] = response.data;\r\n                },\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve definition data: ' + response.responseText);\r\n                }\r\n            );\r\n        }\r\n\r\n        // Saves a new or existing definition.\r\n        $scope.definitionForm = {subType: 'n'};\r\n        $scope.saveDefinition = function() {\r\n\r\n            Rover.debug('Saving definition...');\r\n\r\n            var definition = {\r\n                title: $scope.definitionForm.title,\r\n                alt_titles: $scope.definitionForm.altTitles || '',\r\n                type: 0,\r\n                sub_type: $scope.definitionForm.subType,\r\n                translations: $scope.definitionForm.translations,\r\n                languages: [$scope.language.code]\r\n            };\r\n\r\n            var save = $scope.definitionForm.id ? DefinitionService.update : DefinitionService.create;\r\n\r\n            // save(definition).then(\r\n            DefinitionService.create(definition).then(\r\n\r\n                // On success, browse to definition page.\r\n                function(response) {\r\n                    $location.path('/' + $scope.language.code + '/define/' + response.data.title.replace(' ', '_'));\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('on error...');\r\n                    Rover.debug(response);\r\n                }\r\n            );\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('ViewDefinitionController', [\r\n    '$scope', '$routeParams', '$sessionStorage', '$location',\r\n    'AccountService', 'DefinitionService', 'LanguageService', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, $location,\r\n        AccountService, DefinitionService, LanguageService, Rover) {\r\n\r\n        Rover.debug('ViewDefinitionController');\r\n\r\n        //\r\n        // Query parameters.\r\n        //\r\n\r\n        $scope.langCode = $routeParams.langCode;\r\n        $scope.searchTerm = $routeParams.searchTerm ? $routeParams.searchTerm.replace('_', ' ') : false;\r\n\r\n        // Checks if current path needs authentication.\r\n        if ($routeParams.definitionId) {\r\n            if (!AccountService.hasToken()) {\r\n                return AccountService.setCredentials($location.path());\r\n            }\r\n\r\n            Rover.debug('Definition: ' + $routeParams.definitionId);\r\n        }\r\n\r\n        //\r\n        // Language data.\r\n        //\r\n\r\n        $scope.language = $sessionStorage.languages[$routeParams.langCode] || null;\r\n\r\n        if (!$scope.language)\r\n        {\r\n            Rover.debug('Retrieving language with code \"'+ $scope.langCode +'\"...');\r\n\r\n            LanguageService.get($scope.langCode).then(\r\n\r\n                // Save languge object in $scope and $sessionStorage.\r\n                function(response) {\r\n                    $scope.language = $sessionStorage.languages[$routeParams.langCode] = response.data;\r\n                },\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve language data: ' + response.responseText);\r\n                }\r\n            );\r\n        }\r\n\r\n        //\r\n        // Definition data.\r\n        //\r\n\r\n        if ($scope.searchTerm)\r\n        {\r\n            $scope.definitions = $sessionStorage.definitions[$routeParams.searchTerm] || null;\r\n\r\n            if (!$scope.definitions)\r\n            {\r\n                Rover.debug('Retrieving definitions for \"'+ $scope.searchTerm +'\"...');\r\n\r\n                // DefinitionService.search($scope.searchTerm, 'word', $scope.langCode).then(\r\n                DefinitionService.match($scope.searchTerm).then(\r\n\r\n                    // On success.\r\n                    function(response) {\r\n\r\n                        // Save the definition list locally and in the sessionStorage.\r\n                        $scope.definitions = $sessionStorage.definitions[$routeParams.searchTerm] = response.data;\r\n                    },\r\n\r\n                    // On error.\r\n                    function(response) {\r\n                        Rover.debug('Could not retrieve definitions.');\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('MainController', ['$scope', '$sessionStorage', '$localStorage', 'AccountService', 'Rover', 'assetVersion',\r\n    function($scope, $sessionStorage, $localStorage, AccountService, Rover, assetVersion) {\r\n\r\n        $scope.assetVersion = assetVersion;\r\n\r\n        // Globally available language and definition objects.\r\n        $sessionStorage.languages = $sessionStorage.languages || {};\r\n        $sessionStorage.definitions = $sessionStorage.definitions || {};\r\n\r\n        // Toggles navigation links.\r\n        $scope.toggleNav = function() {\r\n            // $('aside .toggles').toggleClass('hidden-xs');\r\n            $('aside .toggles').toggleClass('hidden-xs');\r\n        };\r\n\r\n        //\r\n        $scope.hasToken = AccountService.hasToken();\r\n    }\r\n]);\r\n","/**\r\n * \r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('PageController', ['$scope',\r\n    function($scope) {\r\n\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('SearchController', [\r\n    '$scope', '$routeParams', '$sessionStorage',\r\n    'LanguageService', 'DefinitionService', 'SearchFactory', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, LanguageService, DefinitionService, SearchFactory, Rover) {\r\n\r\n        Rover.debug('SearchController');\r\n\r\n        // Search parameters.\r\n        $scope.searchTerm = $routeParams.searchTerm ? $routeParams.searchTerm.replace('_', ' ') : null;\r\n        $scope.langCode = $routeParams.langCode;\r\n\r\n        // Language data.\r\n        $scope.language = $routeParams.langCode ?\r\n            ($sessionStorage.languages[$routeParams.langCode] || null) : false;\r\n\r\n        if ($scope.language === null)\r\n        {\r\n            Rover.debug('Retrieving language with code \"'+ $scope.langCode +'\"...');\r\n\r\n            LanguageService.get($scope.langCode).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n\r\n                    // Save the languge object in the $scope and the $sessionStorage.\r\n                    $scope.language = $sessionStorage.languages[$scope.langCode] = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve language data.');\r\n                }\r\n            );\r\n        }\r\n\r\n        // Search results.\r\n        $scope.results = null;\r\n\r\n        // Queries the database.\r\n        $scope.lookup = function(searchTerm, langCode) {\r\n\r\n            // Default values.\r\n            searchTerm = searchTerm || $scope.searchTerm;\r\n            langCode = langCode || $scope.langCode;\r\n\r\n            // Performance check.\r\n            if (searchTerm.length < 1) {\r\n                return;\r\n            }\r\n\r\n            // Definition lookup.\r\n            if (langCode) {\r\n                $scope.lookupDefinition(searchTerm, langCode);\r\n            }\r\n\r\n            // General lookup.\r\n            else {\r\n                $scope.lookupAnything(searchTerm, langCode);\r\n            }\r\n        };\r\n        $scope.lookupDefinition = function(searchTerm, langCode) {\r\n\r\n            Rover.debug('Looking up definitions matching \"'+ searchTerm +'\"...');\r\n\r\n            // Notify user that we're querying the API.\r\n            $scope.results = [];\r\n            $scope.isSearching = true;\r\n\r\n            DefinitionService.search(searchTerm, 'word', langCode).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n                    $scope.isSearching = false;\r\n                    $scope.results = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Error');\r\n                    Rover.debug(response);\r\n                    $scope.isSearching = false;\r\n                }\r\n            );\r\n        };\r\n        $scope.lookupAnything = function(searchTerm, langCode) {\r\n\r\n            Rover.debug('Looking up anything matching \"'+ searchTerm +'\"...');\r\n\r\n            // Notify user that we're querying the API.\r\n            $scope.results = [];\r\n            $scope.isSearching = true;\r\n\r\n            SearchFactory.any(searchTerm).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n                    $scope.isSearching = false;\r\n                    $scope.results = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Error');\r\n                    Rover.debug(response);\r\n                    $scope.isSearching = false;\r\n                }\r\n            );\r\n        };\r\n\r\n        // Clears the search form.\r\n        $scope.clear = function()\r\n        {\r\n            $scope.results = null;\r\n            $scope.searchTerm = '';\r\n        };\r\n\r\n        // Generates the URL for a definition.\r\n        $scope.url = function(def)\r\n        {\r\n            // Performance check.\r\n            if (!def || !def.type) {\r\n                return '#/dict';\r\n            }\r\n\r\n            var url = '#/dict', alias = def.title.replace(' ', '_');\r\n\r\n            switch (def.type)\r\n            {\r\n                case 'word':\r\n                    url = '#/' + def.mainLanguage.code + '/define/' + alias;\r\n            }\r\n\r\n            return url;\r\n        };\r\n\r\n        // If a search term already exists, query the API.\r\n        if ($routeParams.searchTerm) {\r\n            $scope.lookup();\r\n        }\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.service('AccountService', ['$location', '$http', '$sessionStorage', 'Rover', 'apiEndpoint',\r\n    function($location, $http, $sessionStorage, Rover, apiEndpoint) {\r\n\r\n        // Uer data.\r\n        $sessionStorage.auth = $sessionStorage.auth || {token: false};\r\n\r\n        // Authentication URIs.\r\n        this.authURIs = {\r\n            local: apiEndpoint + '/auth/local',\r\n            facebook: apiEndpoint + '/auth/facebook',\r\n            google: apiEndpoint + '/auth/google',\r\n            linkedin: apiEndpoint + '/auth/linkedin',\r\n            twitter: apiEndpoint + '/auth/twitter'\r\n        };\r\n\r\n        // Authenticates user.\r\n        // TODO: how do we include a minimum layer of security? https?\r\n        this.authenticate = function(email, password, callback) {\r\n            $http.post(this.authURIs.local, {email: email, password: password}).then(\r\n\r\n                // If user was successfully authenticated, return token to callback function.\r\n                function(response) {\r\n\r\n                    // Store token for future use.\r\n                    $sessionStorage.auth.token = response.data.token;\r\n\r\n                    // If we don't have a callback function, assume we want to redirect\r\n                    // user to return path.\r\n                    if (typeof callback != 'function') {\r\n                        return $location.path(this.returnPath);\r\n                    }\r\n\r\n                    // Send token to callback function, and redirect user if callback returns true.\r\n                    if (callback.call(response.data.token)) {\r\n                        $location.path(this.returnPath);\r\n                    }\r\n                }.bind(this),\r\n\r\n                function(response) {\r\n                    if (typeof callback == 'function') {\r\n                        callback.call(null);\r\n                    }\r\n                }\r\n            );\r\n        };\r\n\r\n        this.hasToken = function() {\r\n            return this.isAuthenticated();\r\n        };\r\n\r\n        this.isAuthenticated = function() {\r\n            return $sessionStorage.auth.token && $sessionStorage.auth.token.length > 0;\r\n        };\r\n\r\n        // Redirects user to login form.\r\n        this.setCredentials = function(returnTo) {\r\n            $location.path('/login');\r\n\r\n            // Set return path.\r\n            this.returnPath = returnTo || '/';\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('DefinitionService', ['$http', 'apiEndpoint', 'Rover',\r\n    function($http, apiEndpoint, Rover) {\r\n\r\n        return {\r\n\r\n            count: function(type) {\r\n\r\n                type = type || 'word';\r\n\r\n                return $http.get(apiEndpoint + '/' + type + '/count');\r\n            },\r\n\r\n            get: function(id) {\r\n                return $http.get(apiEndpoint + '/definition/' + id);\r\n            },\r\n\r\n            match: function(title) {\r\n                return $http.get(apiEndpoint + '/definition/title/' + title);\r\n            },\r\n\r\n            search : function(term, definitionType, langCode, searchMethod) {\r\n\r\n                langCode = langCode || '';\r\n                definitionType = definitionType || 'word';\r\n                var endpoint = apiEndpoint + '/' + definitionType + '/search/' + term;\r\n\r\n                // Narrow search by language.\r\n                endpoint += '?lang=' + langCode;\r\n\r\n                // Specify search method.\r\n                endpoint += '&method=fulltext';\r\n\r\n    \t\t\treturn $http({method: 'GET', url: endpoint});\r\n    \t\t},\r\n\r\n            create: function(definition) {\r\n                return $http.post(apiEndpoint + '/definition', definition);\r\n            },\r\n\r\n            update: function(definition) {\r\n\r\n            },\r\n\r\n            delete: function(definition) {\r\n\r\n            }\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('LanguageService', ['$http', 'apiEndpoint',\r\n    function($http, apiEndpoint) {\r\n\r\n        return {\r\n\r\n            count: function() {\r\n                return $http.get(apiEndpoint + '/language/count');\r\n            },\r\n\r\n            get: function(langCode) {\r\n                return $http.get(apiEndpoint + '/language/' + langCode);\r\n            }\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.rover', [])\r\n\r\n.service('Rover', ['$window', '$sessionStorage', '$route', '$location',\r\n    function($window, $sessionStorage, $route, $location) {\r\n\r\n        // Dev variables.\r\n        this.timestamp = Date.now();\r\n        this.isLocal =\r\n            (window.location.hostname == 'localhost' ||\r\n                window.location.hostname.match(/.*\\.local$/i) ||\r\n                window.location.hostname.match(/.*\\.vagrant$/i)) ? true : false;\r\n\r\n        // Logs a message to the console.\r\n        this.debug = function(msg) {\r\n            if (this.isLocal && console) {\r\n                console.log(msg);\r\n            }\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('SearchFactory', ['$http', 'apiEndpoint',\r\n    function($http, apiEndpoint) {\r\n\r\n        return {\r\n\r\n            any : function(query) {\r\n                return $http.get(apiEndpoint + '/search/' + query + '?method=fulltext');\r\n    \t\t}\r\n        };\r\n    }\r\n]);\r\n"],"sourceRoot":"/source/"}