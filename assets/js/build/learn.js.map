{"version":3,"sources":["app.js","controllers/config.js","controllers/definition.js","controllers/main.js","controllers/page.js","controllers/search.js","services/definition.js","services/language.js","services/rover.js","services/search.js"],"names":["nkomoLearningApp","angular","module","_appVersion","_isLocal","window","location","hostname","match","_assetVersion","Date","now","_apiEndpoint","constant","nkomoServices","nkomoDirectives","nkomoControllers","config","$routeProvider","assetVersion","when","redirectTo","templateUrl","controller","otherwise","run","$rootScope","$location","Rover","debug","$scope","$routeParams","$sessionStorage","LanguageFactory","DefinitionFactory","searchTerm","replace","langCode","language","languages","get","then","response","data","definitions","search","$localStorage","toggleNav","$","show","SearchFactory","results","lookup","length","lookupDefinition","lookupAnything","isSearching","any","clear","url","def","type","alias","title","mainLanguage","code","factory","$http","apiEndpoint","count","term","definitionType","searchMethod","endpoint","method","service","$window","$route","this","timestamp","isLocal","msg","console","log","query"],"mappings":"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","file":"learn.js","sourcesContent":["/**\n * Main angular application.\n *\n */\nvar nkomoLearningApp = angular.module('learn', [\n    'ngStorage', 'ngRoute',\n    'nkomo.controllers', 'nkomo.directives', 'nkomo.services', 'nkomo.rover'\n]);\n\n//\n// App constants.\n//\n\nvar _appVersion = '0.0.2';\nvar _isLocal =\n    (window.location.hostname == 'localhost' ||\n        window.location.hostname.match(/.*\\.local$/i) ||\n        window.location.hostname.match(/.*\\.vagrant$/i)) ? true : false;\nvar _assetVersion = _isLocal ? Date.now() : _appVersion;\nvar _apiEndpoint = _isLocal ? 'http://api.dinkomo.vagrant/v0.1' : 'http://dinkomo-api.frnk.ca/v0.1';\n\nnkomoLearningApp.constant('appVersion', _appVersion)\n                .constant('isLocalEnvironment', _isLocal)\n                .constant('assetVersion', _assetVersion)\n                .constant('apiEndpoint', _apiEndpoint);\n\n//\n// Initialize modules so that we can use them from different files.\n//\n\nvar nkomoServices = angular.module('nkomo.services', ['nkomo.rover']);\nvar nkomoDirectives = angular.module('nkomo.directives', ['nkomo.rover']);\nvar nkomoControllers = angular.module('nkomo.controllers', ['nkomo.rover']);\n\n//\n// Configures the application.\n//\n\nnkomoLearningApp.config(['$routeProvider', 'assetVersion',\n    function($routeProvider, assetVersion) {\n\n        // Landing page.\n        return $routeProvider.when('/', {\n            redirectTo: '/dict'\n        })\n\n        // About page.\n        .when('/about', {\n\t\t\ttemplateUrl: '/views/about.html?' + assetVersion,\n            controller: 'PageController'\n\t\t})\n\n        // Settings page.\n        .when('/config', {\n\t\t\ttemplateUrl: '/views/config.html?' + assetVersion,\n            controller: 'ConfigController'\n\t\t})\n\n        // Stats page.\n        .when('/stats', {\n\t\t\ttemplateUrl: '/views/stats.html?' + assetVersion,\n            controller: 'PageController'\n\t\t})\n\n        // Search pages.\n        .when('/dict/:searchTerm?', {\n\t\t\ttemplateUrl: '/views/search.html?' + assetVersion,\n            controller: 'SearchController'\n        })\n        .when('/:langCode', {\n\t\t\ttemplateUrl: '/views/search.html?' + assetVersion,\n            controller: 'SearchController'\n        })\n\n        // Dictionary pages.\n        .when('/:langCode/define/:searchTerm', {\n\t\t\ttemplateUrl: '/views/definition.html?' + assetVersion,\n            controller: 'DefinitionController'\n        })\n        .when('/:langCode/poem/:searchTerm', {\n\t\t\ttemplateUrl: '/views/poem.html?' + assetVersion,\n            controller: 'DefinitionController'\n        })\n\n        // Else, redirect to search page.\n        .otherwise({\n\t\t\tredirectTo: '/dict'\n\t\t});\n    }\n])\n\n// Runs the application.\n.run(['$rootScope', '$location', 'Rover',\n    function ($rootScope, $location, Rover) {\n\n        Rover.debug('Running app...');\n\n    }\n]);\n","/**\r\n * \r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('ConfigController', ['$scope',\r\n    function($scope) {\r\n\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('DefinitionController', [\r\n    '$scope', '$routeParams', '$sessionStorage',\r\n    'LanguageFactory', 'DefinitionFactory', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, LanguageFactory, DefinitionFactory, Rover) {\r\n\r\n        Rover.debug('DefinitionController');\r\n\r\n        // Search parameters.\r\n        $scope.searchTerm = $routeParams.searchTerm.replace('_', ' ');\r\n        $scope.langCode = $routeParams.langCode;\r\n\r\n        // Language data.\r\n        $scope.language = $sessionStorage.languages[$routeParams.langCode] || null;\r\n\r\n        if (!$scope.language)\r\n        {\r\n            Rover.debug('Retrieving language with code \"'+ $scope.langCode +'\"...');\r\n\r\n            LanguageFactory.get($scope.langCode).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n\r\n                    // Save the languge object in the $scope and the $sessionStorage.\r\n                    $scope.language = $sessionStorage.languages[$routeParams.langCode] = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve language data.');\r\n                }\r\n            );\r\n        }\r\n\r\n        // Definition list.\r\n        $scope.definitions = $sessionStorage.definitions[$routeParams.searchTerm] || null;\r\n\r\n        if (!$scope.definitions)\r\n        {\r\n            Rover.debug('Retrieving definitions for \"'+ $scope.searchTerm +'\"...');\r\n\r\n            DefinitionFactory.search($scope.searchTerm, 'word', $scope.langCode).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n\r\n                    // Save the definition list locally and in the sessionStorage.\r\n                    $scope.definitions = $sessionStorage.definitions[$routeParams.searchTerm] = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve definitions.');\r\n                }\r\n            );\r\n        }\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('MainController', ['$scope', '$sessionStorage', '$localStorage', 'Rover', 'assetVersion',\r\n    function($scope, $sessionStorage, $localStorage, Rover, assetVersion) {\r\n\r\n        $scope.assetVersion = assetVersion;\r\n\r\n        // Globally available language and definition objects.\r\n        $sessionStorage.languages = $sessionStorage.languages || {};\r\n        $sessionStorage.definitions = $sessionStorage.definitions || {};\r\n\r\n        // Toggles navigation links.\r\n        $scope.toggleNav = function() {\r\n            Rover.debug('toggling nav');\r\n            $('aside .hidden-xs').show();\r\n        };\r\n\r\n    }\r\n]);\r\n","/**\r\n * \r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('PageController', ['$scope',\r\n    function($scope) {\r\n\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.controllers')\r\n\r\n.controller('SearchController', [\r\n    '$scope', '$routeParams', '$sessionStorage',\r\n    'LanguageFactory', 'DefinitionFactory', 'SearchFactory', 'Rover',\r\n\r\n    function($scope, $routeParams, $sessionStorage, LanguageFactory, DefinitionFactory, SearchFactory, Rover) {\r\n\r\n        Rover.debug('SearchController');\r\n\r\n        // Search parameters.\r\n        $scope.searchTerm = $routeParams.searchTerm ? $routeParams.searchTerm.replace('_', ' ') : null;\r\n        $scope.langCode = $routeParams.langCode;\r\n\r\n        // Language data.\r\n        $scope.language = $routeParams.langCode ?\r\n            ($sessionStorage.languages[$routeParams.langCode] || null) : false;\r\n\r\n        if ($scope.language === null)\r\n        {\r\n            Rover.debug('Retrieving language with code \"'+ $scope.langCode +'\"...');\r\n\r\n            LanguageFactory.get($scope.langCode).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n\r\n                    // Save the languge object in the $scope and the $sessionStorage.\r\n                    $scope.language = $sessionStorage.languages[$scope.langCode] = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Could not retrieve language data.');\r\n                }\r\n            );\r\n        }\r\n\r\n        // Search results.\r\n        $scope.results = null;\r\n\r\n        // Queries the database.\r\n        $scope.lookup = function(searchTerm, langCode) {\r\n\r\n            // Default values.\r\n            searchTerm = searchTerm || $scope.searchTerm;\r\n            langCode = langCode || $scope.langCode;\r\n\r\n            // Performance check.\r\n            if (searchTerm.length < 1) {\r\n                return;\r\n            }\r\n\r\n            // Definition lookup.\r\n            if (langCode) {\r\n                $scope.lookupDefinition(searchTerm, langCode)\r\n            }\r\n\r\n            // General lookup.\r\n            else {\r\n                $scope.lookupAnything(searchTerm, langCode);\r\n            }\r\n        };\r\n        $scope.lookupDefinition = function(searchTerm, langCode) {\r\n\r\n            Rover.debug('Looking up definitions matching \"'+ searchTerm +'\"...');\r\n\r\n            // Notify user that we're querying the API.\r\n            $scope.results = [];\r\n            $scope.isSearching = true;\r\n\r\n            DefinitionFactory.search(searchTerm, 'word', langCode).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n                    $scope.isSearching = false;\r\n                    $scope.results = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Error');\r\n                    Rover.debug(response);\r\n                    $scope.isSearching = false;\r\n                }\r\n            );\r\n        };\r\n        $scope.lookupAnything = function(searchTerm, langCode) {\r\n\r\n            Rover.debug('Looking up anything matching \"'+ searchTerm +'\"...');\r\n\r\n            // Notify user that we're querying the API.\r\n            $scope.results = [];\r\n            $scope.isSearching = true;\r\n\r\n            SearchFactory.any(searchTerm).then(\r\n\r\n                // On success.\r\n                function(response) {\r\n                    $scope.isSearching = false;\r\n                    $scope.results = response.data;\r\n                },\r\n\r\n                // On error.\r\n                function(response) {\r\n                    Rover.debug('Error');\r\n                    Rover.debug(response);\r\n                    $scope.isSearching = false;\r\n                }\r\n            );\r\n        };\r\n\r\n        // Clears the search form.\r\n        $scope.clear = function()\r\n        {\r\n            $scope.results = null;\r\n            $scope.searchTerm = '';\r\n        };\r\n\r\n        // Generates the URL for a definition.\r\n        $scope.url = function(def)\r\n        {\r\n            // Performance check.\r\n            if (!def || !def.type) {\r\n                return '#/dict';\r\n            }\r\n\r\n            var url = '#/dict', alias = def.title.replace(' ', '_');\r\n\r\n            switch (def.type)\r\n            {\r\n                case 'word':\r\n                    url = '#/' + def.mainLanguage.code + '/define/' + alias;\r\n            }\r\n\r\n            return url;\r\n        };\r\n\r\n        // If a search term already exists, query the API.\r\n        if ($routeParams.searchTerm) {\r\n            $scope.lookup();\r\n        }\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('DefinitionFactory', ['$http', 'apiEndpoint',\r\n    function($http, apiEndpoint) {\r\n\r\n        return {\r\n\r\n            count: function(type)\r\n            {\r\n                type = type || 'word';\r\n\r\n                return $http.get(apiEndpoint + '/' + type + '/count');\r\n            },\r\n\r\n            search : function(term, definitionType, langCode, searchMethod)\r\n            {\r\n                langCode = langCode || '';\r\n                definitionType = definitionType || 'word';\r\n                var endpoint = apiEndpoint + '/' + definitionType + '/search/' + term;\r\n\r\n                // Narrow search by language.\r\n                endpoint += '?lang=' + langCode;\r\n\r\n                // Specify search method.\r\n                endpoint += '&method=fulltext';\r\n\r\n    \t\t\treturn $http({method: 'GET', url: endpoint});\r\n    \t\t}\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('LanguageFactory', ['$http', 'apiEndpoint',\r\n    function($http, apiEndpoint) {\r\n\r\n        return {\r\n\r\n            count: function() {\r\n                return $http.get(apiEndpoint + '/language/count');\r\n            },\r\n\r\n            get: function(langCode) {\r\n                return $http.get(apiEndpoint + '/language/' + langCode);\r\n            }\r\n        };\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.rover', [])\r\n\r\n.service('Rover', ['$window', '$sessionStorage', '$route', '$location',\r\n    function($window, $sessionStorage, $route, $location) {\r\n\r\n        // Dev variables.\r\n        this.timestamp = Date.now();\r\n        this.isLocal =\r\n            (window.location.hostname == 'localhost' ||\r\n                window.location.hostname.match(/.*\\.local$/i) ||\r\n                window.location.hostname.match(/.*\\.vagrant$/i)) ? true : false;\r\n\r\n        // Logs a message to the console.\r\n        this.debug = function(msg) {\r\n            if (this.isLocal && console) {\r\n                console.log(msg);\r\n            }\r\n        };\r\n\r\n    }\r\n]);\r\n","/**\r\n *\r\n */\r\nangular.module('nkomo.services')\r\n\r\n.factory('SearchFactory', ['$http', 'apiEndpoint',\r\n    function($http, apiEndpoint) {\r\n\r\n        return {\r\n\r\n            any : function(query) {\r\n                return $http.get(apiEndpoint + '/search/' + query + '?method=fulltext');\r\n    \t\t}\r\n        };\r\n    }\r\n]);\r\n"],"sourceRoot":"/source/"}